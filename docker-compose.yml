version: '3.1'

networks:
  my_network:

services:
  account-service:
    build:
      context: ./
      dockerfile: Dockerfile-accountservice
    image: "maxsuelmarinho/golang-microservices-example:accountservice-0.0.1"
    container_name: "account-service"
    #environment:
    #  - CONFIG_USER=${CONFIG_USER}
    #  - CONFIG_PASSWORD=${CONFIG_PASSWORD}
    ports:
      - "8080:8080"
    networks:
      - my_network
    depends_on: 
      - quotes-service
      - config-server
      - rabbitmq
      - logstash
    links:
      - quotes-service
      - config-server
      - rabbitmq
      - logstash
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://peon:12201"
        gelf-compression-type: "none"
        tag: "accountservice"

    #log_driver: "gelf"
    #log_opt:
    #  gelf-address: "udp://peon:12202"
    #  gelf-compression-type: "none"

  quotes-service:
    build:
      context: ./
      dockerfile: Dockerfile-quotesservice
    image: "maxsuelmarinho/golang-microservices-example:quotesservice-0.0.1"
    container_name: "quotes-service"
    environment:
      - CONFIG_USER=${CONFIG_USER}
      - CONFIG_PASSWORD=${CONFIG_PASSWORD}
    ports:
      - "9090:8080"
    networks:
      - my_network

  vip-service:
    build:
      context: ./
      dockerfile: Dockerfile-vipservice
    image: "maxsuelmarinho/golang-microservices-example:vipservice-0.0.1"
    container_name: "vip-service"
    environment:
      - CONFIG_USER=${CONFIG_USER}
      - CONFIG_PASSWORD=${CONFIG_PASSWORD}
    ports:
      - "9191:8080"
    networks:
      - my_network

  image-service:
    build:
      context: ./
      dockerfile: Dockerfile-imageservice
    image: "maxsuelmarinho/golang-microservices-example:imageservice-0.0.1"
    container_name: "image-service"
    environment:
      - CONFIG_USER=${CONFIG_USER}
      - CONFIG_PASSWORD=${CONFIG_PASSWORD}
    ports:
      - "9292:8080"
    networks:
      - my_network

  viz:
    image: "dockersamples/visualizer"
    container_name: "viz"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    ports:
      - "8000:8080"
    networks:
      - my_network

  config-server:
    image: maxsuelmarinho/microservices-example:config-server-0.0.1
    container_name: config-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker,native
      - SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS=file:/config-repo
      #- SPRING_CLOUD_CONFIG_SERVER_GIT_USERNAME=${CONFIG_SERVER_GIT_USERNAME}
      #- SPRING_CLOUD_CONFIG_SERVER_GIT_PASSWORD=${CONFIG_SERVER_GIT_PASSWORD}
      #- SECURITY_USER_NAME=${CONFIG_USER}
      #- SECURITY_USER_PASSWORD=${CONFIG_PASSWORD}
    volumes:
      - ./config-repo:/config-repo
    ports:
      - "8888:8888"
    networks:
      - my_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: "rabbitmq"
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - my_network

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:5.3.0
    command: logstash -f /usr/share/logstash/pipeline/ --config.reload.automatic
    ports:
      - "12201:12201/udp"
      - "5044:5044"
    environment: 
      - "xpack.monitoring.elasticsearch.url=http://elasticsearch:9200"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    links:
      - elasticsearch
    depends_on: 
      - elasticsearch
  
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:5.3.0
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      XPACK_SECURITY_ENABLED: "false"
    links:
      - elasticsearch
    depends_on: 
      - elasticsearch
  
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:5.3.0
    ports:
      - "9200:9200"
    environment: 
      - "http.host=0.0.0.0"
      - "transport.host=127.0.0.1"
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - "xpack.security.enabled=false"